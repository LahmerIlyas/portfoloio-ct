/**
 * Generated by orval v6.5.3 üç∫
 * Do not edit manually.
 * Toptal Calories Tracker App
 * The Toptal Calories Tracker App API description
 * OpenAPI spec version: 1.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  AccessTokenSerializer,
  LoginDto,
  RegisterDto,
  UserProfileSerializer,
  FoodEntrySerializer,
  CreateFoodEntryDto,
  GetManyFoodEntriesSerializer,
  GetManyBaseFoodEntriesControllerFoodEntryEntityParams
} from '.././model'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const usersControllerLogin = (
    loginDto: LoginDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AccessTokenSerializer>> => {
    return axios.post(
      `/login`,
      loginDto,options
    );
  }



    export const useUsersControllerLogin = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerLogin>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof usersControllerLogin>, {data: LoginDto}> = (props) => {
          const {data} = props || {};

          return  usersControllerLogin(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof usersControllerLogin>, TError, {data: LoginDto}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerRegister = (
    registerDto: RegisterDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AccessTokenSerializer>> => {
    return axios.post(
      `/register`,
      registerDto,options
    );
  }



    export const useUsersControllerRegister = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerRegister>, TError,{data: RegisterDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof usersControllerRegister>, {data: RegisterDto}> = (props) => {
          const {data} = props || {};

          return  usersControllerRegister(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof usersControllerRegister>, TError, {data: RegisterDto}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerGetUserProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfileSerializer>> => {
    return axios.get(
      `/me`,options
    );
  }


export const getUsersControllerGetUserProfileQueryKey = () => [`/me`];

    
export const useUsersControllerGetUserProfile = <TData = AsyncReturnType<typeof usersControllerGetUserProfile>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersControllerGetUserProfile>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersControllerGetUserProfileQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof usersControllerGetUserProfile>> = () => usersControllerGetUserProfile(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof usersControllerGetUserProfile>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

/**
 * @summary Create a single FoodEntryEntity
 */
export const createOneBaseFoodEntriesControllerFoodEntryEntity = (
    createFoodEntryDto: CreateFoodEntryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FoodEntrySerializer>> => {
    return axios.post(
      `/food-entries`,
      createFoodEntryDto,options
    );
  }



    export const useCreateOneBaseFoodEntriesControllerFoodEntryEntity = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createOneBaseFoodEntriesControllerFoodEntryEntity>, TError,{data: CreateFoodEntryDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof createOneBaseFoodEntriesControllerFoodEntryEntity>, {data: CreateFoodEntryDto}> = (props) => {
          const {data} = props || {};

          return  createOneBaseFoodEntriesControllerFoodEntryEntity(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof createOneBaseFoodEntriesControllerFoodEntryEntity>, TError, {data: CreateFoodEntryDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Retrieve multiple FoodEntryEntities
 */
export const getManyBaseFoodEntriesControllerFoodEntryEntity = (
    params?: GetManyBaseFoodEntriesControllerFoodEntryEntityParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetManyFoodEntriesSerializer>> => {
    return axios.get(
      `/food-entries`,{
        params,
    ...options}
    );
  }


export const getGetManyBaseFoodEntriesControllerFoodEntryEntityQueryKey = (params?: GetManyBaseFoodEntriesControllerFoodEntryEntityParams,) => [`/food-entries`, ...(params ? [params]: [])];

    
export const useGetManyBaseFoodEntriesControllerFoodEntryEntity = <TData = AsyncReturnType<typeof getManyBaseFoodEntriesControllerFoodEntryEntity>, TError = AxiosError<unknown>>(
 params?: GetManyBaseFoodEntriesControllerFoodEntryEntityParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getManyBaseFoodEntriesControllerFoodEntryEntity>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetManyBaseFoodEntriesControllerFoodEntryEntityQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getManyBaseFoodEntriesControllerFoodEntryEntity>> = () => getManyBaseFoodEntriesControllerFoodEntryEntity(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getManyBaseFoodEntriesControllerFoodEntryEntity>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

