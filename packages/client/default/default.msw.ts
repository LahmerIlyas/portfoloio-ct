/**
 * Generated by orval v6.5.3 🍺
 * Do not edit manually.
 * Toptal Calories Tracker App
 * The Toptal Calories Tracker App API description
 * OpenAPI spec version: 1.0
 */
import {
  rest
} from 'msw'
import faker from 'faker'

export const getUsersControllerLoginMock = () => ({access_token: faker.random.word()})

export const getUsersControllerRegisterMock = () => ({access_token: faker.random.word()})

export const getUsersControllerGetUserProfileMock = () => ({id: faker.datatype.number(), first_name: faker.random.word(), last_name: faker.random.word(), email: faker.random.word(), user_calories_limit: faker.datatype.number(), user_monthly_spend_limit: faker.datatype.number()})

export const getCreateOneBaseFoodEntriesControllerFoodEntryEntityMock = () => ({id: faker.datatype.number(), food_name: faker.random.word(), taken_at: faker.random.word(), calories_count: faker.random.word()})

export const getGetManyBaseFoodEntriesControllerFoodEntryEntityMock = () => ({count: faker.datatype.number(), total: faker.datatype.number(), page: faker.datatype.number(), pageCount: faker.datatype.number(), data: {id: faker.datatype.number(), food_name: faker.random.word(), taken_at: faker.random.word(), calories_count: faker.random.word()}})

export const getDefaultMSW = () => [
rest.post('*/login', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUsersControllerLoginMock()),
        )
      }),rest.post('*/register', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUsersControllerRegisterMock()),
        )
      }),rest.get('*/me', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUsersControllerGetUserProfileMock()),
        )
      }),rest.post('*/food-entries', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateOneBaseFoodEntriesControllerFoodEntryEntityMock()),
        )
      }),rest.get('*/food-entries', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetManyBaseFoodEntriesControllerFoodEntryEntityMock()),
        )
      }),]
