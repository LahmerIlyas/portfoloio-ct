import {MigrationInterface, QueryRunner} from "typeorm";

export class init1643834771519 implements MigrationInterface {
    name = 'init1643834771519'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`
            CREATE TYPE "public"."user_role_enum" AS ENUM('user', 'admin', 'super_admin')
        `);
        await queryRunner.query(`
            CREATE TABLE "user" (
                "id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "first_name" character varying(30),
                "last_name" character varying(30),
                "email" character varying(30) NOT NULL,
                "hashed_password" text NOT NULL,
                "user_calories_limit" numeric NOT NULL DEFAULT '2100',
                "user_monthly_spend_limit" numeric NOT NULL DEFAULT '1000',
                "role" "public"."user_role_enum" NOT NULL DEFAULT 'user',
                CONSTRAINT "PK_cace4a159ff9f2512dd42373760" PRIMARY KEY ("id")
            )
        `);
        await queryRunner.query(`
            CREATE TABLE "food_entry" (
                "id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "food_name" text NOT NULL,
                "taken_at" TIMESTAMP WITH TIME ZONE NOT NULL,
                "calories_count" numeric NOT NULL,
                "price" numeric NOT NULL,
                "user_id" integer NOT NULL,
                CONSTRAINT "PK_8fb8473c98ef0a33c9b3a64f498" PRIMARY KEY ("id")
            )
        `);
        await queryRunner.query(`
            ALTER TABLE "food_entry"
            ADD CONSTRAINT "FK_796e7857a59eeacb2a0f25c9d4b" FOREIGN KEY ("user_id") REFERENCES "user"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
        await queryRunner.query(`
            CREATE VIEW "daily_calories" AS
            SELECT TO_CHAR("entry"."taken_at"::date, 'dd-mm-yyyy') AS "date",
                max("entry"."user_id") AS "user_id",
                sum("entry"."calories_count") AS "calories_count"
            FROM "food_entry" "entry"
            GROUP BY entry.taken_at::date
            ORDER BY entry.taken_at::date DESC
        `);
        await queryRunner.query(`
            INSERT INTO "typeorm_metadata"(
                    "database",
                    "schema",
                    "table",
                    "type",
                    "name",
                    "value"
                )
            VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)
        `, ["public","VIEW","daily_calories","SELECT TO_CHAR( \"entry\".\"taken_at\" :: date, 'dd-mm-yyyy') AS \"date\", max(\"entry\".\"user_id\") AS \"user_id\", sum(\"entry\".\"calories_count\") AS \"calories_count\" FROM \"food_entry\" \"entry\" GROUP BY entry.taken_at::date ORDER BY entry.taken_at::date DESC"]);
        await queryRunner.query(`
            CREATE VIEW "monthly_spending" AS
            SELECT to_char(taken_at, 'MM-YYYY') AS "month",
                max("entry"."user_id") AS "user_id",
                sum("entry"."calories_count") AS "spending"
            FROM "food_entry" "entry"
            GROUP BY to_char(taken_at, 'MM-YYYY')
            ORDER BY to_char(taken_at, 'MM-YYYY') DESC
        `);
        await queryRunner.query(`
            INSERT INTO "typeorm_metadata"(
                    "database",
                    "schema",
                    "table",
                    "type",
                    "name",
                    "value"
                )
            VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)
        `, ["public","VIEW","monthly_spending","SELECT to_char(taken_at,'MM-YYYY') AS \"month\", max(\"entry\".\"user_id\") AS \"user_id\", sum(\"entry\".\"calories_count\") AS \"spending\" FROM \"food_entry\" \"entry\" GROUP BY to_char(taken_at,'MM-YYYY') ORDER BY to_char(taken_at,'MM-YYYY') DESC"]);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`
            DELETE FROM "typeorm_metadata"
            WHERE "type" = $1
                AND "name" = $2
                AND "schema" = $3
        `, ["VIEW","monthly_spending","public"]);
        await queryRunner.query(`
            DROP VIEW "monthly_spending"
        `);
        await queryRunner.query(`
            DELETE FROM "typeorm_metadata"
            WHERE "type" = $1
                AND "name" = $2
                AND "schema" = $3
        `, ["VIEW","daily_calories","public"]);
        await queryRunner.query(`
            DROP VIEW "daily_calories"
        `);
        await queryRunner.query(`
            ALTER TABLE "food_entry" DROP CONSTRAINT "FK_796e7857a59eeacb2a0f25c9d4b"
        `);
        await queryRunner.query(`
            DROP TABLE "food_entry"
        `);
        await queryRunner.query(`
            DROP TABLE "user"
        `);
        await queryRunner.query(`
            DROP TYPE "public"."user_role_enum"
        `);
    }

}
